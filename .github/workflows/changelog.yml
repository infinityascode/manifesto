name: 📋 Automated Changelog Generator

on:
  pull_request:
    types: [closed]
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for changelog entry (e.g., 1.2.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: read

jobs:
  update-changelog:
    if: github.event.pull_request.merged == true || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Generate Changelog Entry
      id: changelog
      run: |
        # Set version based on trigger
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          # For merged PRs, increment patch version or use PR title
          CURRENT_VERSION=$(grep -E "^## \[[0-9]+\.[0-9]+\.[0-9]+\]" CHANGELOG.md | head -1 | sed -E 's/.*\[([0-9]+\.[0-9]+\.[0-9]+)\].*/\1/')
          if [ -z "$CURRENT_VERSION" ]; then
            VERSION="1.1.1"
          else
            # Simple patch increment (can be enhanced)
            PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
            MAJOR_MINOR=$(echo $CURRENT_VERSION | cut -d. -f1,2)
            VERSION="${MAJOR_MINOR}.$((PATCH + 1))"
          fi
        fi
        
        # Get PR information
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "PR_TITLE=$PR_TITLE" >> $GITHUB_OUTPUT
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "AUTHOR=$AUTHOR" >> $GITHUB_OUTPUT

    - name: 📅 Update Changelog
      run: |
        VERSION="${{ steps.changelog.outputs.VERSION }}"
        DATE=$(date '+%Y-%m-%d')
        
        # Create temporary changelog entry
        cat > temp_entry.md << EOF
        
        ## [$VERSION] - $DATE
        
        ### Changed
        - ${{ steps.changelog.outputs.PR_TITLE }}
        
        ### Technical
        - Merged PR #${{ steps.changelog.outputs.PR_NUMBER }} by @${{ steps.changelog.outputs.AUTHOR }}
        - See: ${{ github.event.pull_request.html_url }}
        
        EOF
        
        # Insert new entry after [Unreleased] section
        awk '
        /^## \[Unreleased\]/ {
          print
          # Print existing unreleased content until next ## section
          while ((getline line) > 0 && line !~ /^## \[/) {
            print line
          }
          # Print our new entry
          while ((getline new_line < "temp_entry.md") > 0) {
            print new_line
          }
          # Print the line that caused us to exit (next version)
          if (line ~ /^## \[/) print line
        }
        !/^## \[Unreleased\]/ { print }
        ' CHANGELOG.md > temp_changelog.md
        
        mv temp_changelog.md CHANGELOG.md
        rm -f temp_entry.md

    - name: 🚀 Commit Changelog Update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git commit -m "📋 Update CHANGELOG.md for v${{ steps.changelog.outputs.VERSION }}

        - Added entry for: ${{ steps.changelog.outputs.PR_TITLE }}
        - Updated from PR #${{ steps.changelog.outputs.PR_NUMBER }}
        - Auto-generated by changelog workflow"
        
        git push

    - name: 📊 Summary
      run: |
        echo "✅ Changelog updated successfully!"
        echo "📦 Version: ${{ steps.changelog.outputs.VERSION }}"
        echo "🔄 PR: #${{ steps.changelog.outputs.PR_NUMBER }}"
        echo "👤 Author: @${{ steps.changelog.outputs.AUTHOR }}"
